* Overview
This repo is intended for researching embedded rust - development environment, runtime creation, etc.
It includes various information about the tools, MCUs and more, and a short summary of nix commands to help with learning how nix can be used for environment management.
* Structure
+ This file is the repo's infodump and todo list.
  + It is written in org-mode and exported to markdown.
+ =lib/= - in the future, library crates will go here.
+ =<crate_name>= - crate that produces a program.
+ =flake.nix= - defines development environment, packages (built with =nix build .#name=), and more (in the future).
* Flake outputs
*** Scripts
+ =bmp_gdb [path] [args]...= - conect GDB to Black Magic Probe and do a SWD scan.
+ =openocd-<name> [args]...= - connect to the chip via openocd
+ =probe-rs-<name> <command> [args]...= - run probe-rs command with =--chip <chip_name>= given automatically
*** Dev shells
+ =default= - everything
*** Packages
Refer to [[*Crates][Crates]]
* Crates
** =AT32F403ACGU7_experiment=
+ Study of runtime creation on the aforementioned chip.
+ Test crate for developing flake's features.
* Chips
** Main characteristics
| Chip          | Core(s)       | Freq.   | SRAM | ROM/Flash  | Interfaces                                    | Timers |
|---------------+---------------+---------+------+------------+-----------------------------------------------+--------|
| AT32F403ACGU7 | Cortex M4F    | 240MHz  | 224K | 1M         | 3 I2C, 8 USART, 4 SPI, 2 CAN, 2 SD            |     17 |
|---------------+---------------+---------+------+------------+-----------------------------------------------+--------|
| STM32F411CEU6 | Cortex M4F    | 100MHz  | 512K | 128K       | 3 I2C, 3 USART, 5 SPI, 1 SD                   |     11 |
|---------------+---------------+---------+------+------------+-----------------------------------------------+--------|
| RP2040        | 2x Cortex M0+ | 133+MHz | 264K | 2M-16M     | 2 I2C, 2 UART, 2 SPI, PIO                     |     5+ |
|---------------+---------------+---------+------+------------+-----------------------------------------------+--------|
| ESP32-C3FH4   | RV32IMC       | 160MHz  | 400K | 384K/4MB   | 1 I2C, 2 UART, 3 SPI, 1 I2S, 1 RMT, BLE, WiFi |      2 |
|---------------+---------------+---------+------+------------+-----------------------------------------------+--------|
| CH592F        | RV32IMAC      | 80MHz   | 26K  | 512K total | 1 I2C, 4 UART, 1 SPI, BLE                     |      4 |
** Secondary characteristics
+ TODO: properly count PWM channels on at32 and stm32
+ Low power draw - typical current drawn while in the deepest sleep mode possible (Standby for M4F based chips, for example)
  + First number - without RTC
  + Second number - with RTC

| Chip          | Extra boot modes | PWM | DMA | MPU   | RTC backed memory  | Low power draw    | USB endpoints     |
|---------------+------------------+-----+-----+-------+--------------------+-------------------+-------------------|
| AT32F403ACGU7 | Flash bank 2     |  13 |  14 | 8*8   | 84 bytes           | 3.9 uA / 4.6 uA   | 8 bi              |
|---------------+------------------+-----+-----+-------+--------------------+-------------------+-------------------|
| STM32F411CEU6 | None             | 22? |  16 | 8*8   | 80 bytes           | 1.8 uA / 2.4 uA ‚Åã | 1 bi, 3 IN, 3 OUT |
|---------------+------------------+-----+-----+-------+--------------------+-------------------+-------------------|
| RP2040        | SPI              |  16 |  12 | 8*8 ‚Ä† | None?              | 180 uA / 181 uA ¬ß | 16 bi             |
|---------------+------------------+-----+-----+-------+--------------------+-------------------+-------------------|
| ESP32-C3FH4   | None             |   6 | 3/3 | None  | 8K SRAM + 32 bytes | 1 uA / 5 uA       | 3 IN, 2 OUT       |
|---------------+------------------+-----+-----+-------+--------------------+-------------------+-------------------|
| CH592F        | None             | 12? |     | None  | 2K SRAM + 24K SRAM | 0.8 uA / 7.3 uA ‚ôÇ | 8 bi              |

+ ‚Ä† - subregions are equal in size
+ ‚Åã - Subtract 1.2 uA if power-down reset is disabled (per datasheet)
+ ¬ß - RTC is assumed to be consuming 1.1 uA
+ ‚ôÇÔ∏é - Numbers given for sleep mode, lowest and highest possible configurations
  + Shutdown mode (reset on wakeup) consumes 0.4 uA / 1 uA
** Specific traits
*** Artery AT32F403A
+ SRAM is split into 96K and 128K (according to datasheet)
  - Seems to be insignificant, as they are placed right next to each other in the memory map.
+ Flash memory is split into two 512K banks, the chip can be configured to boot from either of them.
  + They are placed right next to each other in the memory map, so they can be treated as one.
+ Configurable code/data readout protection (sLib)
  + Code and data sections are separate
  + Configurable region size
  + When active, protected regions are unaffected by mass erase
  + Deactivation is passcode protected (which is configured during activation)
  + Deactivation necessarily does mass erase, including on previously protected regions.
+ TODO: research external memory controller (XMC)
+ CRC
*** STMicroelectronics STM32F411xC/xE
+ Readout protection
  1. Level 1 allows downgrading to level 0 (triggering mass erase) and forbids read/write over serial
     - Insecure, has two methods of attacking, resulting in dumping the entire flash.
  2. Level 2 disables bootloader and debugging; only the chip's program can make changes to it; *irreversible*
     + Attack requires flipping bits in the flash, which requires destroying chip's top.
+ CRC
*** Raspberry Pi RP2040
+ UF2 loader allows drag-n-drop flashing
+ Alongside with UF2 loader, PICOBOOT interface is also available
+ Can eke out 20K more SRAM if not using XIP caching and USB
+ Can be overclocked to more than 240MHz and overvolted to 1.3V
+ Has unique Programmable IO (PIO) peripheral, which is essentially a hardware for bit-banging at high speeds
  + Example: [[https://github.com/Wren6991/PicoDVI][Bit banged DVI]], [[https://github.com/kingyoPiyo/Pico-10BASE-T][Bit banged Ethernet]]
+ Bus performance counters for profiling
+ Debug access provides access to one of the cores or Rescue debug port
  + Can be seen with =swdp_scan=
  + Useful when cores cannot be used (due to halted system clock).
  + Rescue DP hard resets the chip and sets a flag about rescue reset, which bootrom checks for, clears and halts the cores.
+ Resus mechanism can recover the controller from halted system clock.
+ Bit banding for peripherals' registers
+ Single-cycle IO (SIO) is connected to both processors and provides 1 cycle access to included peripherals at the cost of not having bit banding.
  Included:
  1. CPUID (unique to each core)
  2. FIFO lines between cores (two for both directions)
  3. 32 hardware spinlocks (shared between cores)
  4. GPIO (shared)
  5. Interpolators (can be used to compute some functions)
     + Can also  üê∏ lerp üê∏
     + Can also clamp
+ 8 cycle integer divider (will need to support separately)
+ Writes to memory-mapped IO registers are always 32 bit sized, if data being written to it is smaller than required it will be duplicated to fill the space.
+ DMA operates faster than processors, doing reads and writes simualteniously
  + TODO: check if this is the case for other controllers, datasheets for them does not explicitly state this.
+ DMA can do CRC for free
*** Espressif ESP32-C3FH4
+ Flash encryption
+ Secure/Insecure environment split
+ 4K one-time-write memory (eFuse)
  - but only 1792 bits available?
+ 8K of RTC-powered memory
+ Remote control (infrared)
+ TWAI (meant for automotive)
+ Hardware acceleration of SHA/RSA/AES/etc.
*** WCH CH592F
+ Flash is divived as such:
  1. 448K General
  2. 32K Data
  3. 24K Bootloader
  4. 8K Info
+ Can run at clock as low as 32KHz
+ RAM is split into 2K and 24K, which are powered separately.
  It is therefore possible to disable 24K RAM to conserve power
+ Capacitive touch input support
+ Hardware acceleration for AES
* Boards
** WeAct BlackPill STM32 v3.0
+ [[https://aliexpress.ru/item/1005001456186625.html][AliExpress]]
+ 8MHz XTAL version is preferred
+ On 25MHz XTAL BlackPill's revision, it needs to be heated up for dfu to work properly
+ There may be difference between RST+BOOT0 and holding BOOT0 while attaching USB cable
  [[https://www.stm32duino.com/viewtopic.php?t=1234&start=20][Source]]
** WeAct BlackPill AT32 v1.0
+ [[https://aliexpress.ru/item/1005004842376803.html][AliExpress]]
** WeAct CH592F
+ [[https://aliexpress.ru/item/1005006117859297.html][AliExpress]]
** WeAct RP2040
+ [[https://aliexpress.ru/item/1005003708090298.html][AliExpress]]
** WeAct ESP32-C3FH4
+ [[https://aliexpress.ru/item/1005004960064227.html][AliExpress]]
* Documentation
** Artery
*** [[https://www.arterychip.com/en/product/AT32F403A.jsp#Resource][AT32F403A Series resources]]
**** [[https://www.arterychip.com/download/DS/DS_AT32F403A_V2.04_EN.pdf][AT32F403A Datasheet]]
**** [[https://www.arterychip.com/download/RM/RM_AT32F403A_407_EN_V2.05.pdf][AT32F403A/407 Reference manual]]
**** [[https://www.arterychip.com/download/Errata/ES0002_AT32F403A_407_Errata_Sheet_EN_V2.0.10.pdf][AT32F403A/407 Erratas]]
**** [[https://www.arterychip.com/download/APNOTE/AN0040_AT32F403A_407_Security_Library_Application_Note_EN_V2.0.2.pdf][AT32F403A/407 sLib Application note]]
** STMicroelectronics
*** [[https://www.st.com/resource/en/datasheet/stm32f411ce.pdf][ST32F411xC/E Datasheet]]
*** [[https://www.st.com/resource/en/reference_manual/DM00119316-.pdf][STM32F411xC/E Reference manual]]
*** [[https://www.st.com/resource/en/errata_sheet/dm00137034-stm32f411xc-and-stm32f411xe-device-limitations-stmicroelectronics.pdf][STM32F411xC/E Erratas]]
*** [[https://www.st.com/resource/en/programming_manual/pm0214-stm32-cortexm4-mcus-and-mpus-programming-manual-stmicroelectronics.pdf][STM32 Cortex-M4F Programming manual]]
** Raspberry Pi
*** [[https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf][RP2040 Datasheet]]
Also doubles as a reference manual and includes erratas
** Espressif
*** [[https://www.espressif.com/sites/default/files/documentation/esp32-c3_datasheet_en.pdf][ESP32-C3 Datasheet]]
*** [[https://www.espressif.com/sites/default/files/documentation/esp32-c3_technical_reference_manual_en.pdf#usbserialjtag][ESP32-C3 Technical reference manual]]
*** [[https://www.espressif.com/sites/default/files/documentation/esp32-c3_errata_en.pdf][ESP32-C3 Erratas]]
*** [[https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/index.html][ESP-IDF Programming guide]]
** WCH
*** [[https://www.wch-ic.com/downloads/CH592DS1_PDF.html][CH592F Datasheet download page]]
*** [[https://www.wch-ic.com/downloads/file/378.html?time=2024-02-05%2021:32:50&code=27Y2KDfBV1Z4gWLChDwF2hbUxEY0bipqRGwSeo7J][CH592F Datasheet]]
*** [[https://www.wch-ic.com/downloads/QingKeV4_Processor_Manual_PDF.html][QingKeV4 Processor Manual download page]]
*** [[https://www.wch-ic.com/downloads/file/367.html?time=2024-02-05%2021:34:27&code=Nq7FLVBIzX6QixNOBW3QoCdHCefG0peN4hij9kdI][QingKeV4 Processor Manual]]
* Tools
** OpenOCD
+ Original version does not explicitly support at32 chips
  + It can work with at32f403acgu7 with this command:
    #+begin_src shell
    openocd -c "set CPUTAPID 0x2ba01477" -f interface/stlink.cfg -c "transport select hla_swd" -f target/stm32f1x.cfg
    #+end_src
    However, it may not work in full; for example, it reports that the chip has one flash bank of size 0.
+ There is [[https://github.com/ArteryTek/openocd][arterytek's fork]] that adds at32 support
+ There is [[https://github.com/Encryptize/openocd-at3][this fork]] but I haven't tried it properly
** GDB
+ Can be used in scripts to automate flashing/dumping/etc.
*** Using GDB with debug probe
[[https://black-magic.org/usage/gdb-commands.html][Commands]] from Black Magic's site
1. Attach the microcontroller to the probe and connect the probe to the computer
2. Launch GDB
3. Run =target extended-remote /dev/ttyACM0= to attach to the probe
4. Run =monitor swdp_scan= to scan the microcontroller for the targets to attach to
5. Run =attach <number>= to attach to one of the targets
** Black Magic
+ [[https://github.com/blackmagic-debug/blackmagic][Source]]
+ Black Magic Probe can be bought or created by flashing a firmware on a supported microcontroller
  + Includes on-probe GDB
  + STM32F411 may have insufficient capabilities to support all features, check github issues
+ Can be used as a standalone (hosted), currently not investigated
  + Package is named =blackmagic=
*** Conversion of BlackPill into a BMP
+ What to watch out for:
  1. There is no ~blackpill-f4x1cx.ini~, it was replaced with other files
  2. Provided shell.nix could be updated
     1. Add meson and ninja
     2. Replace nixpkgs download with =import <nixpkgs>=, which will use system nixkpgs
+ Process:
  1. Built image from the source, it did not work
  2. Downloaded a ~.zip~ file mentioned [[https://github.com/blackmagic-debug/blackmagic/issues/1454][here]], which had prebuilt images
     This worked! It is detected properly now
** probe-rs
+ Relies on other probes (STlink/JLink/CMSIS-DAP)
+ STLink probe does not work with RP2040, [[https://electronics.stackexchange.com/questions/592979/programming-rp2040-with-st-link][as it does not support multidrop swd]]
** TODO dfu-util
+ STM32 is fully supported.
+ I can dump AT32 but not flash: =Only DfuSe file version 1.1a is supported=
  TODO: research how to resolve the issue
+ RP2040 does not support DFU.
+ ESP32-C3 does not support DFU.
+ CH592F does not seem to support DFU.
** Nix
*** Usage
+ direnv - tool used to automatically enter and leave the dev environment.
  + if cargo behaves as if target was not installed, the developer should reenter the env.
    a) =direnv reload= if using default shell
    b) Exit and enter the shell
+ =nix flake show= - shows what packages, dev. environments and scripts (apps) are defined
+ =nix flake update= - updates the lockfile
+ =nix build .\#<name>= - builds the package and creates a =result= symlink
+ =nix run .\#<name> -- [args]...= - runs a script (app)
+ =nix develop= - enters development environment (add =.\#<name>= to select non-default)
+ flake.nix, =devShells.default= - defines default development evironment, =nativeBuildInputs= contains the list of installed packages - it is possible to disable those that will not be used.
*** Details important for writing a flake
+ At the time of writing, =apps."<name>".program= must be a path.
+ nixpkgs has =systemCross= option meant for cross compiling. It is not used here, as it is not needed and it can lead to confusing outcomes, such as attempting to download gcc version that would run on the microcontroller.
+ =doCheck= has to be false for derivatoins because embedded rust cannot be properly tested without a microcontroller.
+ Source clearing was made to use crane's filter together with a filter for linker scripts.
*** Misc
+ =rust-overlay= is used to get the toolchain from the file
+ =crane= is used to build packages.
** Cargo
+ Cross-compilation requires:
  1. A toolchain which can compile to the required target
     + This can be done with =rust-toolchain.toml=
  2. Instructing cargo to compile for the target
     1. There is a CLI option
     2. =.cargo/config.toml= can be created for this
        - This will be ignored if =cargo build= is ran from workspace directory.
     3. =forced-target= can be added to =Cargo.toml=
  3. Linker requires a linker script.
     + =build.rs= is required to copy the linker script to the compilation environment
     + The script itself is required too.
* Note inbox
Unsorted notes go here.
+ All available peripherals should be described in a separate section
+ Chips can be very interesting, and only talking about their peripherals might not be enough.
  Prime example: rp2040 seems to be made for pure bandwidth - PIO can be pushed to 300+ Mbps, bus fabric allows great paralellisation, striped SRAM, etc.
* Tasks
** CANCEL OpenOCD fork
+ TODO: properly include arterytek's openocd fork into the env *as an extra that is disabled by default*
  This will let me debug AT32 using that, if I want it
*** Attempt
+ Added =openocd-artery= and added running it as an app.
  + It overrides the original's source and version.
  + I appreciate that making nix build something can be done by the lightest sneeze as long as it includes =${<derivation name>}=
  + Because the fork is too old, it will require proper packaging, which I don't want to do.
